# GP Collect [![Build Status](https://travis-ci.org/panmari/gpCollect.svg?branch=master)](https://travis-ci.org/panmari/gpCollect) [![Test Coverage](https://codeclimate.com/github/panmari/gpCollect/badges/coverage.svg)](https://codeclimate.com/github/panmari/gpCollect) [![Code Climate](https://codeclimate.com/github/panmari/gpCollect/badges/gpa.svg)](https://codeclimate.com/github/panmari/gpCollect)

This application seeks to make the results from different iterations of the Grand Prix Bern more easily browsable.
The data has been scraped from http://results.gpbern.ch/2015/.

## System dependencies

This project uses Postgresql as database. Make sure, you also have additional modules installed
(at the time of writing, the modules `unaccent` and `pg_trgm` are used). On a debian derivative, these can be installed
with

    sudo apt-get install postgresql-contrib

Apart from that, there are no system dependencies. Just run `bundle install` for the ruby dependencies.

## Database creation

As usual for a rails app, run the commands `rake db:create` and `rake db:migrate` to get the database ready for seeding.
Then get the
seed data either by running `rake db:scrape_data` and `rake db:scrape_old_data` or requesting the files from a
contributor (place the data manually in `db/data`. Once you have all files necessary, run

    rake db:seed

### Merge Duplicates

During seeding, there is no normalization of data. This leads to some duplicated runners. To merge them, execute

    rake db:merge_runners

whenever you seeded new data. This is usually done automatically when after `rake db:seed`

### Create cached data

Some information shown is aggregated over a lot of rows. Some frequent aggregates are stored in database.
Recompute them if necessary using

    rake db:create_run_aggregates

## Tests

Tests with some fixtures are available. To run them, execute

    rake test
